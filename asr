1: O QUE SIGNIFICA O M  NO PYTHON3 -M VENV VENV?
modulo

2: COMO ECONTRAR A VERSAO DO PYTHON? 
which python, python --version

3: COMO FAZER O UPGRADE DO PYTHON?
python -m pip install pip --upgrade

4: COMO EXECUTAR UM PROGRAMA PYTHON?
python main.py

5: COMO LISTAR TODAS AS VERSOES DO PYENV?
pyenv install -l or --list

6: COMO MOSTRAR QUAIS PYTHONS ESTAO INSTALADOS?
pyenv version 

7: COMO DEFINIR O PYTHON PADRAO ATRAVES DO PYENV?
pyenv global <version>

8: COMO FAZER UM TEXTO SER INTERPRETADO PELO PYTHON?
""" """

9: O DOCSTRING É UM COMENTARIO NO PYTHON?
não, ele é interpretado pelo python, o comentario não é 

10: COMO FUNCIONA O COMENTARIO NO INTERPRETADOR PYTHON?
ele ignora a partir da cerquilha


-------------------------------------------------------------
Session 5
11111111111111

11: QUAL É UMA DAS PRIMEIRAS COISAS QUE É EXECUTADO QUANDO VOCE CHAMA A CLASSE?
__init__

12: COMO É CHAMADO A FUNÇÃO QUANDO ESTÁ DENTRO DA CLASSE?
metodo

13: QUAL É O PRIMEIRO PARAMETRO QUE PASSAMOS NO __INIT__?
def __init__(self,<>):

14: COMO CRIAMOS UMA CLASSE PESSOA COM PARAMETROS DE NOME E SOBRENOME?
class Pessoa:
    def __init__(self, nome, sobrenome):
        self.nome = nome
        self.sobrenome = sobrenome


15: COMO COLOCAR COMPORTAMENTOS EM UMA CLASSE?
criando metodos 

16: O METODO INIT RETORNA O QUE?
none

17: ESCREVA UMA CLASSE COM HARD CODED
class Diego:
    def __init__(self):
        self.nome = 'Diego' #hard coded

18: O QUE É HARD CODED?
é algo que foi escrito diretamente no codigo

19: O QUE TODO METODO RECEBE COMO PRIMEIRO PARAMENTRO PARA REFERENCIAR A INSTANCIA NO PYTHON?
self


20: ESCREVA UMA CLASSE CARRO COM COMPORTAMENTO DE ACELERAR
class Carro:
    def __init__(self, nome):
        self.nome = nome

    def acelerar(self):
        print(f'{self.nome} está acelerando')
        
p = Carro('Fusca')
p.acelerar()

21: O NOME SELF É UMA CONVENÇÃO?
sim

11111111111111
---------------------------------------------------------------------------------------
22222222222222
22: UMA CLASSE PODE GERAR QUANTAS INSTANCIAS?
infinitas

23: NA CLASSE O QUE É O SELF?
é a propria instancia da classe

24: QUAL METODO É EXECUTADO QUANDO INSTANCIA A CLASSE?
__init__

25: DEFINA UMA VARIAVEL PARA SER EXECUTADA QUANDO INSTANCIAR A CLASSE SEM CHAMAR ESSA VARIAVEL
class Macarrao:
    def __init__(self, nome):
        self.nome = nome

        variavel = 'Joazinho'
        print(variavel)
        

p = Macarrao('diiego')

print(p.nome)

26: COMO É CHAMADO O ESCOPO DAS CLASSES E METODOS?
namespaces

27: COMO DEFINIR ATRIBUTO DE CLASSE E ATRIBUTO DE INSTANCIA E COMO RETORNAR UM METODO DA CLASSE EM OUTRO METODO?
class test:
    variavel = 'diego'

    def __init__(self,nome):
        self.nome = nome

    def acelerar(self):
        return f'{self.nome} está acelerando {self.variavel}'

    def ace(self,*args, **kwargs):
        return self.acelerar(*args, **kwargs)
    
p = test('diego')
print(p.ace())

22222222222222
-------------------------------------------------------------------------------------------------------------------
33333333333333
27: ESCREVA UM CLASSE CAMERA PARA MANTER O ESTADOS (FILMAR, FOTOGRAFAR, PARA_DE_FILMAR) DENTRO DELA. REQUISITO DE QUANDO ESTIVER FILMANDO NÃO PODE FOTOGRAFAR

class Camera:
    def __init__(self, nome, filmando=False):
        self.nome = nome
        self.filmando = filmando

    def filmar(self):
        if self.filmando:
            print(f'{self.nome} JÁ está filmando...')
            return

        print(f'{self.nome} está filmando...')
        self.filmando = True

    def parar_filmar(self):
        if not self.filmando:
            print(f'{self.nome} NÃO está filmando...')
            return

        print(f'{self.nome} está parando de filmar...')
        self.filmando = False

    def fotografar(self):
        if self.filmando:
            print(f'{self.nome} não pode fotografar filmando')
            return

        print(f'{self.nome} está fotografando...')



28: QUAIS AS DUAS MANEIRAS DE ACESSAR UM ATRIBUTO DE CLASSE?
self.<nome_atributo> ou <Classe>.<nome_atributo>

29: ESCREVA UMA CLASSE COM ATRIBUTO DE ESCOPO DE CLASSE
class Pessoa:
    ano_atual = 2022

    def __init__(self, nome):
        self.nome = nome

    def print_attributes(self):
        print(self.nome)
        print(Pessoa.ano_atual)
        print(f'O print do atributo de classe com self {self.ano_atual}')

33333333333333
---------------------------------------------------------------------------------------------
44444444444444

O QUE É O __DICT__?
é o dicionario que está dentro do objeto, ele matem um objeto do tipo mapping dentro das instancias da classes python. Ele mantem os valores que podem ser escritos dentro do objeto. Um dicionario que está dentro da instancias da classe python, é considerado um atributo que está dentro da classe, é onde os atributos da classe são salvos. Ele retem os valores do seu objeto

COMO DELETAR UM DADO ATRIBUTO DE UMA CLASSE?
del <instancia_classe>.<atributo_classe>

ONDE OS ATRIBUTOS DA CLASSE SÃO SALVOS?
__dict__

QUAL A FUNÇÃO A QUE CONSEGUIMOS VER O __DICT__?
vars(<objeto>)

O __DICT__ É EDITAVEL? CONSTRUA UMA CLASSE!
class Pessoa:
    def __init__(self,nome='Diego'):
        self.nome = nome

p = Pessoa()
p.__dict__['sobrenome'] = 'G'

print(vars(p))

CRIE UM DICIONARIO DE DADOS E DESEMPACOTE EM UMA CLASSE
class Pessoa:
    def __init__(self, nome='Diego',idade='1000'):
        self.nome = nome
        self.idade = idade 

dados = {'nome':'Ds', 'idade':'2333'}

p = Pessoa(**dados)

PARA QUE SERVE O **KWARGS DO PYTHON?
para desempacotar um dicionario dentro do parametro, como se passasse varias chave valor em um simples **kwargs

CONSTRUA UMA CLASSE COM PROPRIEDADES E DEPOIS TENHA UM DICIONARIO DE DADOS E DESEMPACOTE ELES
class Pessoa:
    def __init__(self, nome='Diego',idade='1000'):
        self.nome = nome
        self.idade = idade

dados = {'nome':'Ds', 'idade':'2333'}

p = Pessoa(**dados)

44444444444444
---------------------------------------------
55555555555555
QUAL CONVENÇÃO DE NOME É UTILIZADA PARA CLASSE NO PYTHON?
pascal case

QUAL CONVENÇÃO DE NOME É UTILIZADA PARA NOMES NO PYTHON?
snake case
 
CRIE UMA CLASSE PESSOA COM PROPRIEDADES DE NOME E SOBRENOME E SALVE OS DADOS DA CLASSE EM JSON
class Pessoa:

    def __init__(self,nome='Diego',sobrenome=''):
        self.nome = nome
        self.sobrenome = sobrenome

p1 = Pessoa('GF','GF3')
p2 = Pessoa('fc', 'df')
lista = [vars(p1), vars(p2)]

import json 
PATH_TO_JSON = './work/pythonclub/5_POO/json/salva_classe3.json'
def salvar_json():
    with open(PATH_TO_JSON, 'w') as arquivo:
        json.dump(lista, arquivo, ensure_ascii=False, indent=2)
        
salvar_json()

importe o modulo criado no python para ter o caminho do arquivo e faça a leitura dele
from work.pythonclub.f5_POO.from_module_json import PATH_TO_JSON, Pessoa
import json

with open(PATH_TO_JSON,'r') as read_file:
    dados = json.load(read_file)

print(dados)

importe a classe pessoa e passe os dados do f5_POO/json para essa classe
from work.pythonclub.f5_POO.from_module_json import PATH_TO_JSON, Pessoa
import json

with open(PATH_TO_JSON,'r') as arquivo:
    dados = json.load(arquivo)
    p1 = Pessoa(**dados[0])
    p2 = Pessoa(**dados[1])
    
p1.__dict__

como adiar a execução de algo no arquivo python?
envolve em uma função

qual é nome do modulo quando executamos diretamente?
main

como descobrir o nome do modulo?
__name__

ESCREVA UMA CLASSE QUE SÓ EXECUTE O METODO DENTRO DELA SE O MODULO FOR ELE MESMO
class Pessoa:
    def __init__(self,nome='diego'):
        self.nome = nome

    def ace(self):
        print(f'{self.nome}')

    if __name__ == '__main__':
        print('Ele é o main')
        ace()

PARA FAZER UM METODO DE CLASSE O QUE É NECESSARIO?
o decorator em cima do metodo @classmethod

CONSTRUA UMA CLASSE PESSOA COM ATRIBUTO E METODO DE CLASSE:
class Pessoa:
    ano_atual = 2022
    def __init__(self,nome='Diego', idade=11):
        self.nome = nome
        self.idade = idade

    @classmethod
    def cria_instancia(cls,nome='Diego'):
        return cls(nome)
    
p = Pessoa('Df')
p1 = Pessoa().cria_instancia('dsdi')

p.__dict__

O QUE É O DECORATOR @STATICMETHOD?
é uma função que está dentro da classe, sem acesso a instancia e sem acesso ao cls

O QUE É O METHOD?
é o metodo da instancia, com acesso ao self

CONSTRUA UMA CLASSE COM STATICMETHOD E UTILIZE O ARGS E KWARGS NESSE METODO
class Pessoa:
    def __init__(self,nome='Diego):
        self.nome = nome

    @staticmethod
    def ace(*args,**kwargs):
        print(args,kwargs)
Pessoa.ace(1,2,4)
Pessoa.ace(dd=2,sdds=4)

55555555555555
-------------------------------------------------------------------------------------------------------------------------
66666666666666

O QUE O INIT FAZ E ELE É UMA METODO DE QUE?
ele é uma metodo da instancia, que inicia o valores(dados) da instancia

O QUE É PROPERTY NO PYTHON?
é metodo que se comporta como uma propriedade do objeto, ela faz o método se comportar como atributo/propriedade
é um getter de modo pythonico, é um metodo para obter o valor da propriedade

QUAIS AS PRINCIPAIS SITUAÇÕES QUE É UTILIZADA O PROPERTY?
como getter, p evitar quebrar codigo de cliente,p habilitar o setter, executar ações ao obter um atributo

O QUE É CODIGO CLIENTE?
é o código que usa o seu código

ESCREVA UM UM METODO DENTRO DE UMA CLASSE QUE SE COMPORTE COMO UMA PROPRIEDADE
class Prancha:
    def __init__(self,marca='df'):
        self.marca = marca

    @property
    def udd(self):
        return 'ddd'

QUAL A FUNÇÃO GERAL DE UM MÉTODO?
executar ações

PARA ESCREVER UM SETTER NO MODO PYTHONICO O QUE É NECESSARIO?
uma @property
 
QUANDO TEMOS UM UNDERLINE NA PROPRIEDADE OU NO QUE SIGNIFICA?
que a propriedade não devem ser usado, uma convenção para não usar esse atributo fora da classe

ESCREVA UMA CLASSE COM GETTER AND SETTER ONDE A PROPRIEDADE SÓ POSSA SER MUDADA PELO SETTER, NÃO PELO INIT
class Caneta:
    def __init__(self,nome):
        self.nome = nome

    @property
    def nome(self):
        return self._nome

    @nome.setter
    def nome(self,valor):
        print('passei')
        self._nome = valor

66666666666666
-------------------------------------------------------------------------------------------------------------------------
77777777777777

NO PYTHON EU TENHO MODIFICADORES DE ACESSO?
não

COMO É REPRESENTADO O MODIFICADOR DE ACESSO PUBLIC NO PYTHON?
normal, sem nenhum underline

COMO É REPRESENTADO O MODIFICADOR DE ACESSO PROTECTED NO PYTHON?
com um underline, não deve ser usado fora da classe, para sua classe e subclasses

COMO É REPRESENTADO O MODIFICADOR DE ACESSO PRIVATE NO PYTHON?
com dois underlines no python, somente para a sua classe, nem para classe filha (subclasses)

O QUE É NAME MANGLING?
desfiguração de nomes, so deve ser usado na classe em que foi declarado

O QUE É ASSOCIAÇÃO EM OBJETOS PYTHON?
quando um objeto conhece o outro em uma relação fraca

ESCREVA UMA CLASSE COM ASSOCIAÇÃO DE CLASSE ENTRE ESCRITOR E FERRAMENTA_DE_ESCREVER, GUARDE A ASSOCIAÇÃO DA FERRAMENTA_DE_ESCREVER NA PROPRIEDADE FERRAMENTA DA CLASSE ESCRITOR
class Escritor:
    def __init__(self, nome) -> None:
        self.nome = nome
        self._ferramenta = None

    @property
    def ferramenta(self):
        return self._ferramenta

    @ferramenta.setter
    def ferramenta(self, ferramenta):
        self._ferramenta = ferramenta


class FerramentaDeEscrever:
    def __init__(self, nome):
        self.nome = nome

    def escrever(self):
        return f'{self.nome} está escrevendo'


escritor = Escritor('Luiz')
caneta = FerramentaDeEscrever('Caneta Bic')
maquina_de_escrever = FerramentaDeEscrever('Máquina')
escritor.ferramenta = maquina_de_escrever

print(caneta.escrever())
print(maquina_de_escrever.escrever())
print(escritor.ferramenta.escrever())


77777777777777