1: O QUE SIGNIFICA O M  NO PYTHON3 -M VENV VENV?
modulo

2: COMO ENCONTRAR A VERSAO DO PYTHON? 
which python, python --version

3: COMO FAZER O UPGRADE DO PYTHON?
python -m pip install pip --upgrade

4: COMO EXECUTAR UM PROGRAMA PYTHON?
python main.py

5: COMO LISTAR TODAS AS VERSOES DO PYENV?
pyenv install -l or --list

6: COMO MOSTRAR QUAIS PYTHONS ESTAO INSTALADOS?
pyenv version 

7: COMO DEFINIR O PYTHON PADRAO ATRAVES DO PYENV?
pyenv global <version>

8: COMO FAZER UM TEXTO SER INTERPRETADO PELO PYTHON?
""" """

9: O DOCSTRING É UM COMENTARIO NO PYTHON?
não, ele é interpretado pelo python, o comentario não é 

10: COMO FUNCIONA O COMENTARIO NO INTERPRETADOR PYTHON?
ele ignora a partir da cerquilha


-------------------------------------------------------------
Session 5
11111111111111

11: QUAL É UMA DAS PRIMEIRAS COISAS QUE É EXECUTADO QUANDO VOCE CHAMA A CLASSE?
__init__

12: COMO É CHAMADO A FUNÇÃO QUANDO ESTÁ DENTRO DA CLASSE?
metodo

13: QUAL É O PRIMEIRO PARAMETRO QUE PASSAMOS NO __INIT__?
def __init__(self,<>):

14: COMO CRIAMOS UMA CLASSE PESSOA COM PARAMETROS DE NOME E SOBRENOME?
class Pessoa:
    def __init__(self, nome, sobrenome):
        self.nome = nome
        self.sobrenome = sobrenome


15: COMO COLOCAR COMPORTAMENTOS EM UMA CLASSE?
criando metodos 

16: O METODO INIT RETORNA O QUE?
none

17: ESCREVA UMA CLASSE COM HARD CODED
class Diego:
    def __init__(self):
        self.nome = 'Diego' #hard coded

18: O QUE É HARD CODED?
é algo que foi escrito diretamente no codigo

19: O QUE TODO METODO RECEBE COMO PRIMEIRO PARAMENTRO PARA REFERENCIAR A INSTANCIA NO PYTHON?
self


20: ESCREVA UMA CLASSE CARRO COM COMPORTAMENTO DE ACELERAR
class Carro:
    def __init__(self, nome):
        self.nome = nome

    def acelerar(self):
        print(f'{self.nome} está acelerando')
        
p = Carro('Fusca')
p.acelerar()

21: O NOME SELF É UMA CONVENÇÃO?
sim

11111111111111
---------------------------------------------------------------------------------------
22222222222222
22: UMA CLASSE PODE GERAR QUANTAS INSTANCIAS?
infinitas

23: NA CLASSE O QUE É O SELF?
é a propria instancia da classe

24: QUAL METODO É EXECUTADO QUANDO INSTANCIA A CLASSE?
__init__

25: DEFINA UMA VARIAVEL PARA SER EXECUTADA QUANDO INSTANCIAR A CLASSE SEM CHAMAR ESSA VARIAVEL
class Macarrao:
    def __init__(self, nome):
        self.nome = nome

        variavel = 'Joazinho'
        print(variavel)
        

p = Macarrao('diiego')

print(p.nome)

26: COMO É CHAMADO O ESCOPO DAS CLASSES E METODOS?
namespaces

27: COMO DEFINIR ATRIBUTO DE CLASSE E ATRIBUTO DE INSTANCIA E COMO RETORNAR UM METODO DA CLASSE EM OUTRO METODO?
class test:
    variavel = 'diego'

    def __init__(self,nome):
        self.nome = nome

    def acelerar(self):
        return f'{self.nome} está acelerando {self.variavel}'

    def ace(self,*args, **kwargs):
        return self.acelerar(*args, **kwargs)
    
p = test('diego')
print(p.ace())

22222222222222
-------------------------------------------------------------------------------------------------------------------
33333333333333
28: ESCREVA UM CLASSE CAMERA PARA MANTER O ESTADOS (FILMAR, FOTOGRAFAR, PARA_DE_FILMAR) DENTRO DELA. REQUISITO DE QUANDO ESTIVER FILMANDO NÃO PODE FOTOGRAFAR

class Camera:
    def __init__(self, nome, filmando=False):
        self.nome = nome
        self.filmando = filmando

    def filmar(self):
        if self.filmando:
            print(f'{self.nome} JÁ está filmando...')
            return

        print(f'{self.nome} está filmando...')
        self.filmando = True

    def parar_filmar(self):
        if not self.filmando:
            print(f'{self.nome} NÃO está filmando...')
            return

        print(f'{self.nome} está parando de filmar...')
        self.filmando = False

    def fotografar(self):
        if self.filmando:
            print(f'{self.nome} não pode fotografar filmando')
            return

        print(f'{self.nome} está fotografando...')



29: QUAIS AS DUAS MANEIRAS DE ACESSAR UM ATRIBUTO DE CLASSE?
self.<nome_atributo> ou <Classe>.<nome_atributo>

30: ESCREVA UMA CLASSE COM ATRIBUTO DE ESCOPO DE CLASSE
class Pessoa:
    ano_atual = 2022

    def __init__(self, nome):
        self.nome = nome

    def print_attributes(self):
        print(self.nome)
        print(Pessoa.ano_atual)
        print(f'O print do atributo de classe com self {self.ano_atual}')

33333333333333
---------------------------------------------------------------------------------------------
44444444444444

31: O QUE É O __DICT__?
é o dicionario que está dentro do objeto, ele matem um objeto do tipo mapping dentro das instancias da classes python. Ele mantem os valores que podem ser escritos dentro do objeto. Um dicionario que está dentro da instancias da classe python, é considerado um atributo que está dentro da classe, é onde os atributos da classe são salvos. Ele retem os valores do seu objeto

32: COMO DELETAR UM DADO ATRIBUTO DE UMA CLASSE?
del <instancia_classe>.<atributo_classe>

33: ONDE OS ATRIBUTOS DA CLASSE SÃO SALVOS?
__dict__

34: QUAL A FUNÇÃO A QUE CONSEGUIMOS VER O __DICT__?
vars(<objeto>)

35: O __DICT__ É EDITAVEL? CONSTRUA UMA CLASSE!
class Pessoa:
    def __init__(self,nome='Diego'):
        self.nome = nome

p = Pessoa()
p.__dict__['sobrenome'] = 'G'

print(vars(p))

36: CRIE UM DICIONARIO DE DADOS E DESEMPACOTE EM UMA CLASSE
class Pessoa:
    def __init__(self, nome='Diego',idade='1000'):
        self.nome = nome
        self.idade = idade 

dados = {'nome':'Ds', 'idade':'2333'}

p = Pessoa(**dados)

37: PARA QUE SERVE O **KWARGS DO PYTHON?
para desempacotar um dicionario dentro do parametro, como se passasse varias chave valor em um simples **kwargs

38: CONSTRUA UMA CLASSE COM PROPRIEDADES E DEPOIS TENHA UM DICIONARIO DE DADOS E DESEMPACOTE ELES
class Pessoa:
    def __init__(self, nome='Diego',idade='1000'):
        self.nome = nome
        self.idade = idade

dados = {'nome':'Ds', 'idade':'2333'}

p = Pessoa(**dados)

44444444444444
---------------------------------------------
55555555555555
39: QUAL CONVENÇÃO DE NOME É UTILIZADA PARA CLASSE NO PYTHON?
pascal case

40: QUAL CONVENÇÃO DE NOME É UTILIZADA PARA NOMES NO PYTHON?
snake case
 
41: CRIE UMA CLASSE PESSOA COM PROPRIEDADES DE NOME E SOBRENOME E SALVE OS DADOS DA CLASSE EM JSON
class Pessoa:

    def __init__(self,nome='Diego',sobrenome=''):
        self.nome = nome
        self.sobrenome = sobrenome

p1 = Pessoa('GF','GF3')
p2 = Pessoa('fc', 'df')
lista = [vars(p1), vars(p2)]

import json 
PATH_TO_JSON = './work/pythonclub/5_POO/json/salva_classe3.json'
def salvar_json():
    with open(PATH_TO_JSON, 'w') as arquivo:
        json.dump(lista, arquivo, ensure_ascii=False, indent=2)
        
salvar_json()

42: IMPORTE O MODULO CRIADO NO PYTHON PARA TER O CAMINHO DO ARQUIVO E FAÇA A LEITURA DELE
from work.pythonclub.f5_POO.from_module_json import PATH_TO_JSON, Pessoa
import json

with open(PATH_TO_JSON,'r') as read_file:
    dados = json.load(read_file)

print(dados)

43: IMPORTE A CLASSE PESSOA E PASSE OS DADOS DO F5_POO/JSON PARA ESSA CLASSE
from work.pythonclub.f5_POO.from_module_json import PATH_TO_JSON, Pessoa
import json

with open(PATH_TO_JSON,'r') as arquivo:
    dados = json.load(arquivo)
    p1 = Pessoa(**dados[0])
    p2 = Pessoa(**dados[1])
    
p1.__dict__

44: COMO ADIAR A EXECUÇÃO DE ALGO NO ARQUIVO PYTHON?
envolve em uma função

45: QUAL É NOME DO MODULO QUANDO EXECUTAMOS DIRETAMENTE?
main

46: COMO DESCOBRIR O NOME DO MODULO?
__name__

47: ESCREVA UMA CLASSE QUE SÓ EXECUTE O METODO DENTRO DELA SE O MODULO FOR ELE MESMO
class Pessoa:
    def __init__(self,nome='diego'):
        self.nome = nome

    def ace(self):
        print(f'{self.nome}')

    if __name__ == '__main__':
        print('Ele é o main')
        ace()

48: PARA FAZER UM METODO DE CLASSE O QUE É NECESSARIO?
o decorator em cima do metodo @classmethod

49: CONSTRUA UMA CLASSE PESSOA COM ATRIBUTO E METODO DE CLASSE:
class Pessoa:
    ano_atual = 2022
    def __init__(self,nome='Diego', idade=11):
        self.nome = nome
        self.idade = idade

    @classmethod
    def cria_instancia(cls,nome='Diego'):
        return cls(nome)
    
p = Pessoa('Df')
p1 = Pessoa().cria_instancia('dsdi')

p.__dict__

50: O QUE É O DECORATOR @STATICMETHOD?
é uma função que está dentro da classe, sem acesso a instancia e sem acesso ao cls

51: O QUE É O METHOD?
é o metodo da instancia, com acesso ao self

52: CONSTRUA UMA CLASSE COM STATICMETHOD E UTILIZE O ARGS E KWARGS NESSE METODO
class Pessoa:
    def __init__(self,nome='Diego):
        self.nome = nome

    @staticmethod
    def ace(*args,**kwargs):
        print(args,kwargs)
Pessoa.ace(1,2,4)
Pessoa.ace(dd=2,sdds=4)

55555555555555
-------------------------------------------------------------------------------------------------------------------------
66666666666666

53: O QUE O INIT FAZ E ELE É UMA METODO DE QUE?
ele é uma metodo da instancia, que inicia o valores(dados) da instancia

54: O QUE É PROPERTY NO PYTHON?
é metodo que se comporta como uma propriedade do objeto, ela faz o método se comportar como atributo/propriedade
é um getter de modo pythonico, é um metodo para obter o valor da propriedade

55: QUAIS AS PRINCIPAIS SITUAÇÕES QUE É UTILIZADA O PROPERTY?
como getter, p evitar quebrar codigo de cliente,p habilitar o setter, executar ações ao obter um atributo

56: O QUE É CODIGO CLIENTE?
é o código que usa o seu código

57: ESCREVA UM METODO DENTRO DE UMA CLASSE QUE SE COMPORTE COMO UMA PROPRIEDADE
class Prancha:
    def __init__(self,marca='df'):
        self.marca = marca

    @property
    def udd(self):
        return 'ddd'

58: QUAL A FUNÇÃO GERAL DE UM MÉTODO?
executar ações

59: PARA ESCREVER UM SETTER NO MODO PYTHONICO O QUE É NECESSARIO?
uma @property, o decoretor @property e o outro decoretor <nome_propriedade>.setter
 
60: QUANDO TEMOS UM UNDERLINE NA PROPRIEDADE OU NO METODO, O QUE SIGNIFICA?
que a propriedade ou o metodo não deve ser usado, uma convenção para não usar esse atributo fora da classe

61: ESCREVA UMA CLASSE COM GETTER AND SETTER ONDE A PROPRIEDADE SÓ POSSA SER MUDADA PELO SETTER, NÃO PELO INIT
class Caneta:
    def __init__(self,nome):
        self.nome = nome

    @property
    def nome(self):
        return self._nome

    @nome.setter
    def nome(self,valor):
        print('passei')
        self._nome = valor

66666666666666
-------------------------------------------------------------------------------------------------------------------------
77777777777777

62: NO PYTHON EU TENHO MODIFICADORES DE ACESSO?
não

63: COMO É REPRESENTADO O MODIFICADOR DE ACESSO PUBLIC NO PYTHON?
normal, sem nenhum underline

64: COMO É REPRESENTADO O MODIFICADOR DE ACESSO PROTECTED NO PYTHON?
com um underline, não deve ser usado fora da classe, para sua classe e subclasses

65: COMO É REPRESENTADO O MODIFICADOR DE ACESSO PRIVATE NO PYTHON?
com dois underlines no python, somente para a sua classe, nem para classe filha (subclasses)

66: O QUE É NAME MANGLING?
desfiguração de nomes, so deve ser usado na classe em que foi declarado

67: O QUE É ASSOCIAÇÃO EM OBJETOS PYTHON?
quando um objeto conhece o outro em uma relação fraca

68: ESCREVA UMA CLASSE COM ASSOCIAÇÃO DE CLASSE ENTRE ESCRITOR E FERRAMENTA_DE_ESCREVER, GUARDE A ASSOCIAÇÃO DA FERRAMENTA_DE_ESCREVER NA PROPRIEDADE FERRAMENTA DA CLASSE ESCRITOR A CLASSE FERRAMENTA_DE_ESCREVER DEVERÁ TER UM METODO ESCREVER QUE RETORNA A PROPRIEDADE ESTÁ ESCREVENDO
class Escritor:
    def __init__(self, nome) -> None:
        self.nome = nome
        self._ferramenta = None

    @property
    def ferramenta(self):
        return self._ferramenta

    @ferramenta.setter
    def ferramenta(self, ferramenta):
        self._ferramenta = ferramenta


class FerramentaDeEscrever:
    def __init__(self, nome):
        self.nome = nome

    def escrever(self):
        return f'{self.nome} está escrevendo'


escritor = Escritor('Luiz')
caneta = FerramentaDeEscrever('Caneta Bic')
maquina_de_escrever = FerramentaDeEscrever('Máquina')
escritor.ferramenta = maquina_de_escrever

print(caneta.escrever())
print(maquina_de_escrever.escrever())
print(escritor.ferramenta.escrever())


77777777777777

-------------------------------------------------------------------------
69: O QUE É AGREGAÇÃO NA RELAÇÃO DE OBJETOS?
é uma relação fraca que que é maior que a associação. Os objetos vivem separadamente, porém um precisa do outro, mas podem viver separadamente

70: O QUE É ASSOCIAÇÃO NA RELAÇÃO DE OBJETOS?
um objeto conhece o outro em uma relação fraca

71: O QUE É A AGREGAÇÃO DA ASSOCIAÇÃO?
uma especialização da associação

72: QUE TIPO DE RELAÇÃO TEM OS OBJETOS DE AGREGAÇÃO?
Geralmente é uma relação de um para muitos, onde um
objeto tem um ou muitos objetos.

73: CONSTRUA UMA CLASSE DE AGREGAÇÃO, ONDE SEJA A CLASSE CARRINHO E PRODUTO, GUARDE OS PRODUTOS NA PROPRIEDADE DA CLASSE CARRINHO, COLOQUE METODOS DE LISTAR O PREÇO (TOTAL_PRODUTOS), INSERIR PRODUTOS(INSERIR_PRODUTOS), LISTAR OS PRODUTOS(LISTAR_PRODUTOS). A CLASSE PRODUTO, TEM O NOME E PREÇO COMO DADOS.
class Carrinho:
    def __init__(self):
        self._produtos = []

    def total(self):
        return sum([p.preco for p in self._produtos])

    def inserir_produtos(self, *produtos):
        # self._produtos.extend(produtos)
        # self._produtos += produtos
        for produto in produtos:
            self._produtos.append(produto)

    def listar_produtos(self):
        print()
        for produto in self._produtos:
            print(produto.nome, produto.preco)
        print()


class Produto:
    def __init__(self, nome, preco):
        self.nome = nome
        self.preco = preco


carrinho = Carrinho()
p1, p2 = Produto('Caneta', 1.20), Produto('Camiseta', 20)
carrinho.inserir_produtos(p1, p2)
carrinho.listar_produtos()
print(carrinho.total())

74: O QUE É COMPOSIÇÃO EM ORIENTAÇÃO A OBJETOS?
é uma especialização da agregação, mas quando o objeto pai for apagado, todas as referencias dos objetos filhos também são apagadas

75: A RELAÇÕES EM ORIENTAÇÃO A OBJETOS PRECISAM TER COMPOSIÇÃO?
nenhuma relação precisa ter composição

76: DESEMPACOTE UMA LISTA DE NOMES EM 3 VARIAVEIS
nomes = ['Maria','helena','Luiz']
nome1, nome3, nome3 = nomes

77: TENHA UMA LISTA COM 3 VALORES, DESEMPACOTE O 1 VALOR EM UMA VARIAVEL E EMPACOTE O RESTANTE
nome1, *resto = ['Maria','helena','Luiz']

78: TENHA UMA LISTA COM 3 VALORES, DESEMPACOTE o 1 VALOR EM UMA VARIAVEL E EMPACOTE O RESTANTE COM A CONVENÇÃO DO PYTHON
nome, *_ = ['Maria','helena','Luiz']

79: TENHA UMA LISTA COM 3 VALORES, DESEMPACOTE O 2 VALOR EM UMA VARIAVEL E COLOQUE O PRIMEIRO VALOR NA CONVENÇÃO E EMPACOTE O RESTANTE COM A CONVENÇÃO DO PYTHON
_,nome, *_ = ['Maria','helena','Luiz']

80: TENHA UMA LISTA COM 3 VALORES, DESEMPACOTE O 3 VALOR EM UMA VARIAVEL  E EMPACOTE OS 2 PRIMEIROS COM A CONVENÇÃO DO PYTHON
*_,nome = ['Maria','helena','Luiz']

81: O QUE É UMA TUPLA?
é uma lista imutável

82: CRIE UMA LISTA COM 3 NOMES, DEPOIS ENUMERE ELAS, USE UMA FUNÇÃO PARA MOSTRAR O PRIMEIRO ITEM
lista = ['Maria', 'João', 'José']
lista_enumerada = enumerate(lista)
next(lista_enumerada)

83: CRIE UMA LISTA COM 3 NOMES, DEPOIS ENUMERE ELAS, MOSTRE TODOS OS ITEMS DAS ENUMERAÇÕES
lista = ['Maria', 'João', 'José']
lista_enumerada = enumerate(lista)
for item in lista_enumerada:
    print(item)

84: O QUE ACONTECE QUANDO VOCÊ CONSOME O INTERATOR (ENUMERATE)?
ele elimina os dados, você não tem mais acesso a ele, o ponteiro chegou até o o fim 

85: O QUE O ENUMERATE FAZ?
ele enumera cada item da sua lista

86: ENUMERE UMA LISTA QUALQUER COM UM START NO 2 ITEM
lista = ['Maria', 'João', 'José']
lista_enumerada = list(enumerate(lista,start=2))

87: CRIE UMA LISTA COM 3 NOMES, DEPOIS ENUMERE ELAS, MOSTRE TODOS OS ITEMS DAS ENUMERAÇÕES DESEMPACOTANDO ELA NAS VARIAVEIS INDICE, VALOR
lista = ['Maria', 'João', 'José']
for item in enumerate(lista):
    indice, valor = item
    print(f'O indice:-> {indice}, e o valor:-> {valor}')

88: CRIE UMA LISTA COM 3 NOMES, DEPOIS ENUMERE ELAS, MOSTRE TODOS OS ITEMS DAS ENUMERAÇÕES DESEMPACOTANDO ELA NAS VARIAVEIS INDICE, VALOR NO MODO PYTHONICO
lista = ['Maria', 'João', 'José']
for indice, valor in enumerate(lista):
    print(f'O indice:-> {indice}, e o valor:-> {valor}')

89: Como eu faço para desempacotar um dicionario como parametro na função?
**<dicionário>

90: COMO EU EMPACOTO UM DICIONARIO QUANDO ESTOU CONSTRUINDO UMA FUNÇÃO?
**kwargs

91: COMO PASSAR ARGUMENTOS NOMEADOS DE UMA VEZ PARA UMA FUNÇÃO?
**kwargs
 
92: DESEMPACOTE UM DICIONARIO COM 2 KEYWORDS, EM VARIAVEIS a,a1,b,b1
dictinary = {'a':'1','b','2'}
(a,a1),(b,b1) = dictinary.items()

93: DESEMPACOTE 2 DICIONARIOS ALEATORIOS EM 1 VARIAVEL
dictionary1 = {'a':'1','b':'2'}
dictionary2 = {'c':'3','d':'4'}

items = {**dictionary1,**dictionary2}

94: CONSTRUA UMA FUNÇÃO QUE FAÇA UM EMPACOTAMENTO DE DICIONÁRIOS E TUPLAS
def mostro_argumentos_nomeados(*args, **kwargs):
    print(args,kwargs)

95: DESEMPACOTE UM DICIONARIO DENTRO DE UMA FUNÇÃO COMO NÃO NOMEADO, ESSA FUNÇÃO TEM O EMPACOTAMENTO *ARGS E **KWARGS
dictionary = {'a':'1','b':'2'}

def desempacotar_dicionario_como_nao_nomeado(*args, **kwargs):
    print(args,kwargs)
    
desempacotar_dicionario_como_nao_nomeado(dictionary)

96: DESEMPACOTE UMA TUPLA (1,2,3,4) DENTRO DE UMA FUNÇÃO COMO NÃO NOMEADO, ESSA FUNÇÃO TEM O EMPACOTAMENTO *ARGS E **KWARGS, E FAÇA A SOMA DESSA TUPLA COM A FUNÇÃO SUM()
tupla = (1,2,3,4)

def desempacotar_tupla_como_nao_nomeado(*args, **kwargs):
    print(args,kwargs)
    print(sum(args))
    
desempacotar_tupla_como_nao_nomeado(*tupla)

97: QUAL É O EMPACOTADOR DE ARGUMENTOS NÃO NOMEADOS DENTRO DA FUNÇÃO QUE TRANSFORMA OS ARGUMENTOS EM TUPLA?
*args

98: QUAL É O EMPACOTADOR DE ARGUMENTOS NOMEADOS DENTRO DA FUNÇÃO QUE TRANSFORMA OS ARGUMENTOS EM DICIONÁRIO?
**kwargs

99: O QUE É GARBET COLLECTOR?
quando a linguegem ve que não existe mais referencia para aquele determinado objeto, ela apaga esse objeto da memoria

100: QUAL A DIFERENÇA DA COMPOSIÇÃO PARA AGREGAÇÃO?
quando você apaga o todo, todas as partes desse todo somem, ex:Como se tivessem a classe produto e carrinho, e esse produtos fizessem parte do carrinho, apagando o carrinho os produtos também somem, quando você apaga o pai de todos os objetos, os objetos parte também sumirão

101: MOSTRE A HIERARQUIA DA COMPOSIÇÃO, ASSOCIAÇÃO, AGREGAÇÃO
associação, agregação, composição

102: O QUE É A COMPOSIÇÃO EM RELAÇÃO A AGREGAÇÃO?
é uma especialização da agregação

103: ESCREVA UMA CLASSE COM COMPOSIÇÃO ENTRE A CLASSE CLIENTE E ENDERECO, A CLASSE CLIENTE TEM AS PROPRIEDADES: NOME E ENDERECO, A CLASSE ENDERECO TEM AS PROPRIEDADES: RUA E NUMERO. FAÇA UMA COMPOSIÇÃO PELO MÉTODO INSERIR_ENDERECO, E MOSTRE O FUNCIONAMENTO COM OUTRO METODO INSERINDO DE FORMA EXTERNA INSERIR_ENDERECO_EXTERNO. COLOQUE O METODO __DEL__ PARA MOSTRAR O GARBET COLLECTOR E PRINT NO FINAL O ENDERECO CRIADO EXTERNO, DEPOIS AQUI TERMINA O CODIGO
class Cliente:
    def __init__(self, nome):
        self.nome = nome
        self.enderecos = []

    def inserir_endereco(self, rua, numero):
        self.enderecos.append(Endereco(rua, numero))

    def inserir_endereco_externo(self, endereco):
        self.enderecos.append(endereco)

    def listar_enderecos(self):
        for endereco in self.enderecos:
            print(endereco.rua, endereco.numero)

    def __del__(self):
        print('APAGANDO,', self.nome)


class Endereco:
    def __init__(self, rua, numero):
        self.rua = rua
        self.numero = numero

    def __del__(self):
        print('APAGANDO,', self.rua, self.numero)


cliente1 = Cliente('Maria')
cliente1.inserir_endereco('Av Brasil', 54)
cliente1.inserir_endereco('Rua B', 6745)
endereco_externo = Endereco('Av Saudade', 123213)
cliente1.inserir_endereco_externo(endereco_externo)
cliente1.listar_enderecos()

del cliente1


print(endereco_externo.rua, endereco_externo.numero)
print('######################## AQUI TERMINA MEU CÓDIGO')

104: EXERCÍCIO COM CLASSES 1 - CRIE UMA CLASSE CARRO (NOME), 2 - CRIE UMA CLASSE MOTOR (NOME), 3 - CRIE UMA CLASSE FABRICANTE (NOME), 4 - FAÇA A LIGAÇÃO ENTRE CARRO TEM UM MOTOR. OBS.: UM MOTOR PODE SER DE VÁRIOS CARROS, 5 - FAÇA A LIGAÇÃO ENTRE CARRO E UM FABRICANTE . OBS.: UM FABRICANTE PODE FABRICAR VÁRIOS CARROS EXIBA O NOME DO CARRO, MOTOR E FABRICANTE NA TELA
