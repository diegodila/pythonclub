o que significa o m  no python3 -m venv venv?
modulo

como econtrar a versao do python? 
which python

como fazer o upgrade do python?
python -m pip install pip --upgrade

como executar um programa python?
python main.py

como listar todas as versoes do pyenv?
pyenv install -l or --list

como mostrar quais pythons estao instalados?
pyenv version 

como definir o python padrao atraves do pyenv?
pyenv global <version>

como fazer um texto ser interpretado pelo python?
""" """

o docstring é um comentario no python?
não, ele é interpretado pelo python, o comentario não é 

como funciona o comentario no interpretador python?
ele ignora a partir da cerquilha


-------------------------------------------------------------
Session 5

qual é uma das primeiras coisas que é executado quando voce chama a classe?
__init__

como é chamado a função quando está dentro da classe?
metodo

qual é o primeiro parametro que passamos no __init__?
def __init__(self,<>):

como criamos uma classe Pessoa com parametros de nome e sobrenome?
class Pessoa:
    def __init__(self, nome, sobrenome):
        self.nome = nome
        self.sobrenome = sobrenome


como colocar comportamentos em uma classe?
criando metodos 

o metodo init retorna o que?
none

escreva uma classe com hard coded
class Diego:
    def __init__(self):
        self.nome = 'Diego' #hard coded

o que é hard coded?
é algo que foi escrito diretamento no codigo

o que todo metodo recebe como primeiro paramentro para referenciar a instancia no python?
self


escreva uma classe carro com comportamento de acelerar
class Carro:
    def __init__(self, nome):
        self.nome = nome

    def acelerar(self):
        print(f'{self.nome} está acelerando')
        
p = Carro('Fusca')
p.acelerar()

o nome self é uma convenção?
sim

---------------------------------------------------------------------------------------
uma classe pode gerar quantas instancias?
infinitas

na classe o que é o self?
é a propria instancia da classe

qual metodo é executado quando instancia a classe?
__init__

defina uma variavel para ser executada quando instanciar a classe sem chamar essa variavel
class Macarrao:
    def __init__(self, nome):
        self.nome = nome

        variavel = 'Joazinho'
        print(variavel)
        

p = Macarrao('diiego')

print(p.nome)

como é chamado o escopo das classes e metodos?
namespaces

como definir atributo de classe e atributo de instancia e como retornar um metodo da classe em outro metodo?
class test:
    variavel = 'diego'

    def __init__(self,nome):
        self.nome = nome

    def acelerar(self):
        return f'{self.nome} está acelerando {self.variavel}'

    def ace(self,*args, **kwargs):
        return self.acelerar(*args, **kwargs)
    
p = test('diego')
print(p.ace())

-------------------------------------------------------------------------------------------------------------------

escreva um classe camera para manter o estados (filmar, fotografar, para_de_filmar) dentro dela. requisito de quando estiver filmando não pode fotografar

class Camera:
    def __init__(self, nome, filmando=False):
        self.nome = nome
        self.filmando = filmando

    def filmar(self):
        if self.filmando:
            print(f'{self.nome} JÁ está filmando...')
            return

        print(f'{self.nome} está filmando...')
        self.filmando = True

    def parar_filmar(self):
        if not self.filmando:
            print(f'{self.nome} NÃO está filmando...')
            return

        print(f'{self.nome} está parando de filmar...')
        self.filmando = False

    def fotografar(self):
        if self.filmando:
            print(f'{self.nome} não pode fotografar filmando')
            return

        print(f'{self.nome} está fotografando...')



quais as duas maneiras de acessar um atributo de classe?
self.<nome_atributo> ou <Classe>.<nome_atributo>

escreva uma classe com atributo de escopo de classe
class Pessoa:
    ano_atual = 2022

    def __init__(self, nome):
        self.nome = nome

    def print_attributes(self):
        print(self.nome)
        print(Pessoa.ano_atual)
        print(f'O print do atributo de classe com self {self.ano_atual}')


---------------------------------------------------------------------------------------------

o que é o __dict__?
é o dicionario que está dentro do objeto, ele matem um objeto do tipo mapping dentro das instancias da classes python. Ele mantem os valores que podem ser escritos dentro do objeto. Um dicionario que está dentro da instancias da classe python, é considerado um atributo que está dentro da classe, é onde os atributos da classe são salvos. Ele retem os valores do seu objeto

como deletar um dado atributo de uma classe?
del <instancia_classe>.<atributo_classe>

onde os atributos da classe são salvos?
__dict__

qual a função a que conseguimos ver o __dict__?
vars(<objeto>)

o __dict__ é editavel? construa uma classe!
class Pessoa:
    def __init__(self,nome='Diego'):
        self.nome = nome

p = Pessoa()
p.__dict__['sobrenome'] = 'G'

print(vars(p))

crie um dicionario de dados e desempacote em uma classe
class Pessoa:
    def __init__(self, nome='Diego',idade='1000'):
        self.nome = nome
        self.idade = idade 

dados = {'nome':'Ds', 'idade':'2333'}

p = Pessoa(**dados)

para que serve o **kwargs do python?
para desempacotar um dicionario dentro do parametro, como se passasse varias chave valor em um simples **kwargs

construa uma classe com propriedades e depois tenha um dicionario de dados e desempacote eles
class Pessoa:
    def __init__(self, nome='Diego',idade='1000'):
        self.nome = nome
        self.idade = idade

dados = {'nome':'Ds', 'idade':'2333'}

p = Pessoa(**dados)


---------------------------------------------

qual convenção de nome é utilizada para Classe no python?
pascal case

qual convenção de nome é utilizada para nomes no python?
snake case
 
crie uma classe Pessoa com propriedades de nome e sobrenome e salve os dados da classe em json
class Pessoa:

    def __init__(self,nome='Diego',sobrenome=''):
        self.nome = nome
        self.sobrenome = sobrenome

p1 = Pessoa('GF','GF3')
p2 = Pessoa('fc', 'df')
lista = [vars(p1), vars(p2)]

import json 
PATH_TO_JSON = './work/pythonclub/5_POO/json/salva_classe3.json'
def salvar_json():
    with open(PATH_TO_JSON, 'w') as arquivo:
        json.dump(lista, arquivo, ensure_ascii=False, indent=2)
        
salvar_json()

importe o modulo do python para ter o caminho do arquivo e faça a leitura dele

from work.pythonclub.f5_POO.from_module_json import PATH_TO_JSON, Pessoa
import json

with open(PATH_TO_JSON,'r') as read_file:
    dados = json.load(read_file)

print(dados)

importe a classe pessoa e passe os dados do f5_POO/json para essa classe
from work.pythonclub.f5_POO.from_module_json import PATH_TO_JSON, Pessoa
import json

with open(PATH_TO_JSON,'r') as arquivo:
    dados = json.load(arquivo)
    p1 = Pessoa(**dados[0])
    p2 = Pessoa(**dados[1])
    
p1.__dict__

como adiar a execução de algo no arquivo python?
envolve em uma função

qual é nome do modulo quando executamos diretamente?
main

como descobrir o nome do modulo?
__name__

escreve uma classe que só execute se o modulo por ele mesmo
class Pessoa:
    def __init__(self,nome='diego'):
        self.nome = nome

    def ace(self):
        print(f'{self.nome}')

    if __name__ == '__main__':
        print('Ele é o main')
        ace()

para fazer um metodo de classe o que é necessario?
o decorator em cima do metodo @classmethod

construa uma classe Pessoa com atributo e metodo de classe:
class Pessoa:
    ano_atual = 2022
    def __init__(self,nome='Diego', idade=11):
        self.nome = nome
        self.idade = idade

    @classmethod
    def cria_instancia(cls,nome='Diego'):
        return cls(nome)
    
p = Pessoa('Df')
p1 = Pessoa().cria_instancia('dsdi')

p.__dict__

o que é o decorator @staticmethod?
é uma função que está dentro da classe, sem acesso a instancia e sem acesso ao cls

o que é o method?
é o metodo da instancia, com acesso ao self